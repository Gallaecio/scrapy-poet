## Template file used to generate Page Objects whith the command `python -m zyte_po ...`
## Any lines starting by ## in the template will be stripped out
##
## The parameters of this template will be replaced using the python `format()` function
##
## If settings were:
##
##      PO_MODULE = "zyte_po.po"
##      PO_TESTS_MODULE = "tests_zyte_po"
##
## And the command executed were:
##
##      scrapy override autoextract.AutoExtractProductData \
##         "https://books.toscrape.com/catalogue/a-flight-of-arrows-the-pathfinders-2_876/index.html"
##
## Then the available parameters and their values for the template would be:
##
##      url: https://books.toscrape.com/catalogue/a-flight-of-arrows-the-pathfinders-2_876/index.html
##      domain: toscrape.com
##      base_po_module: autoextract
##      base_po_name: AutoExtractProductData
##      item_name: Product
##      po_name: ToscrapeComProduct
##      po_module: zyte_po.po
##      po_submodule: toscrape_com_product
##      test_module: tests_zyte_po
##      test_submodule: test_toscrape_com_product
##      po_path: /home/ivan/autocrawl/zyte_po/po
##      test_path: /home/ivan/autocrawl/tests_zyte_po

from pathlib import Path
from {base_po_module} import {base_po_name}
from pytest_twisted import inlineCallbacks
from scrapy_poet.po_tester import POTester

from {po_module}.{po_submodule} import {po_name}  # noqa: F401


@inlineCallbacks
def test_{po_submodule}():
    """
    Update this test fixtures by running::
        scrapy override \\
            {po_name} \\
            "{url}"
    """
    url = "{url}"
    tester = POTester("{url}", {base_po_name}, Path("{test_path}"))
    po = yield tester.replay()  # type: {base_po_name}
    item = po.to_item()
    assert item.url == "{url}"
    # Put your own asserts here:
